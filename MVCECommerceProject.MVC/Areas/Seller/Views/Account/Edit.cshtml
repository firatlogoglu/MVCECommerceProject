@model MVCECommerceProject.MODEL.Entities.AppUser

@{
    ViewBag.Title = "Düzenle";
    Layout = "~/Areas/Seller/Views/Shared/_Layout.cshtml";
}

<div class="card shadow mb-4">
    <div class="card-header py-3">
        <h6 class="m-0 font-weight-bold text-primary">@ViewBag.Title</h6>
    </div>
    <div class="card-body">
        @using (Html.BeginForm("Edit", "Account", FormMethod.Post, new { @class = "form-signin", enctype = "multipart/form-data" }))
        {
            <div class="login-wrap">
                @Html.Partial("PartialViews/_ErrorMsg")
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.TCNO, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.TCNO) } })
                        @Html.ValidationMessageFor(model => model.TCNO, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Name) } })
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.SurName, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.SurName) } })
                        @Html.ValidationMessageFor(model => model.SurName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Email) } })
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Password) } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.ConfirmPassword) } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.PhoneNumber, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.PhoneNumber) } })
                        @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.Address) } })
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BirthDate, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.BirthDate) } })
                        @Html.ValidationMessageFor(model => model.BirthDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.BirthPlace, new { htmlAttributes = new { @class = "form-control", placeholder = @Html.DisplayNameFor(model => model.BirthPlace) } })
                        @Html.ValidationMessageFor(model => model.BirthPlace, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label for="BloodType">@Html.DisplayNameFor(model => model.BloodType)</label>
                        <select class="form-control" id="BloodType" name="BloodType">
                            @foreach (var item in Enum.GetValues(typeof(MVCECommerceProject.MODEL.Enums.Person.BloodType)))
                            {
                                if ((MVCECommerceProject.MODEL.Enums.Person.BloodType)item == Model.BloodType)
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.BloodType)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.A_Positive:
                                            <option selected value="@item">A Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.A_Negative:
                                            <option selected value="@item">A Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.B_Positive:
                                            <option selected value="@item">B Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.B_Negative:
                                            <option selected value="@item">B Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.AB_Positive:
                                            <option selected value="@item">AB Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.AB_Negative:
                                            <option selected value="@item">AB Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.O_Positive:
                                            <option selected value="@item">0 R+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.O_Negative:
                                            <option selected value="@item">0 Rh-</option>
                                            break;
                                    }
                                }
                                else
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.BloodType)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.A_Positive:
                                            <option value="@item">A Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.A_Negative:
                                            <option value="@item">A Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.B_Positive:
                                            <option value="@item">B Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.B_Negative:
                                            <option value="@item">B Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.AB_Positive:
                                            <option value="@item">AB Rh+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.AB_Negative:
                                            <option value="@item">AB Rh-</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.O_Positive:
                                            <option value="@item">0 R+</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.BloodType.O_Negative:
                                            <option value="@item">0 Rh-</option>
                                            break;
                                    }
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.BloodType, "", new { @class = "text-danger" })

                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label for="Gender">@Html.DisplayNameFor(model => model.Gender)</label>
                        <select class="form-control" id="Gender" name="Gender">
                            @foreach (var item in Enum.GetValues(typeof(MVCECommerceProject.MODEL.Enums.Person.Gender)))
                            {
                                if ((MVCECommerceProject.MODEL.Enums.Person.Gender)item == Model.Gender)
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.Gender)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.Gender.Female:
                                            <option selected value="@item">Kadın</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.Gender.Male:
                                            <option selected value="@item">Erkek</option>
                                            break;
                                    }
                                }
                                else
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.Gender)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.Gender.Female:
                                            <option value="@item">Kadın</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.Gender.Male:
                                            <option value="@item">Erkek</option>
                                            break;
                                    }
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label for="MaritalState">@Html.DisplayNameFor(model => model.MaritalState)</label>
                        <select class="form-control" id="MaritalState" name="MaritalState">
                            @foreach (var item in Enum.GetValues(typeof(MVCECommerceProject.MODEL.Enums.Person.MaritalState)))
                            {
                                if ((MVCECommerceProject.MODEL.Enums.Person.MaritalState)item == Model.MaritalState)
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.MaritalState)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Married:
                                            <option selected value="@item">Evli</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Single:
                                            <option selected value="@item">Bekar</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Widowed:
                                            <option selected value="@item">Dul</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Divorce:
                                            <option selected value="@item">Boşanmış</option>
                                            break;
                                    }
                                }
                                else
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Person.MaritalState)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Married:
                                            <option value="@item">Evli</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Single:
                                            <option value="@item">Bekar</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Widowed:
                                            <option value="@item">Dul</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Person.MaritalState.Divorce:
                                            <option value="@item">Boşanmış</option>
                                            break;
                                    }
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.MaritalState, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label for="Role">@Html.DisplayNameFor(model => model.Role)</label>
                        <select class="form-control" id="Role" name="Role">
                            @foreach (var item in Enum.GetValues(typeof(MVCECommerceProject.MODEL.Enums.Role)))
                            {
                                if ((MVCECommerceProject.MODEL.Enums.Role)item == Model.Role)
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Role)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Role.Customer:
                                            <option selected value="@item">Sadece Müşteri</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Seller_Customer:
                                            <option selected value="@item">Müşteri-Satıcı</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Admin:
                                            <option selected value="@item">Yönetici</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Member:
                                            <option selected value="@item">Member</option>
                                            break;
                                    }
                                }
                                else
                                {
                                    switch ((MVCECommerceProject.MODEL.Enums.Role)item)
                                    {
                                        case MVCECommerceProject.MODEL.Enums.Role.Customer:
                                            <option value="@item">Sadece Müşteri</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Seller_Customer:
                                            <option value="@item">Müşteri-Satıcı</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Admin:
                                            <option value="@item">Yönetici</option>
                                            break;
                                        case MVCECommerceProject.MODEL.Enums.Role.Member:
                                            <option value="@item">Member</option>
                                            break;
                                    }
                                }
                            }
                        </select>
                        @Html.ValidationMessageFor(model => model.Role, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <label>Görsel Seç</label>
                        <div>
                            <img src="@Model.ImagePath" class="img-sm-mycss" />
                            <br />
                        </div>
                        <input type="file" class="form-control" name="ImagePath" />
                        @Html.ValidationMessageFor(model => model.ImagePath, "", new { @class = "text-danger" })
                    </div>
                </div>
                <br />

                <div class="col-md-10">
                    <button class="btn btn-lg btn-block btn-success" type="submit">Kaydet</button>
                </div>

            </div>
        }
    </div>
</div>

<div class="card shadow mb-4">
    @Html.ActionLink("Back to List", "Index")
</div>